from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import bcrypt  # For password hashing
from models import db, User  # Import the database connection and User model

app = Flask(__name__)  # Create a Flask application instance
app.config['SQLALCHEMY_DATABASE_URI'] = 'mssql+pyodbc://jschu:cosmicjschu@35.225.8.0/cosmic_crust_db?driver=ODBC+Driver+17+for+SQL+Server'  # ***YOUR DB DETAILS!***
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Suppress a warning
db.init_app(app)  # Initialize SQLAlchemy with the Flask app
app.app_context().push()  # Create an application context

with app.app_context():
    db.create_all()  # Create the database tables

@app.route('/menu.html')
def menu():
    return send_from_directory('.', 'menu.html')

@app.route('/account.html', methods=['GET'])
def account():
    return send_from_directory('.', 'account.html')

@app.route('/register', methods=['POST'])  # Define the /register endpoint for user registration
def register_user():
    data = request.get_json()  # Get the data sent from the client as JSON
    if not data or 'create-name' not in data or 'create-email' not in data or 'create-password' not in data:
        return jsonify({'error': 'Missing required fields'}), 400  # Return an error if any required field is missing

    full_name = data['create-name']
    email = data['create-email']
    password = data['create-password']

    if User.query.filter_by(email=email).first():  # Check if a user with this email already exists
        return jsonify({'error': 'Email already exists'}), 409  # Return an error if the email is already taken

    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')  # Hash the password using bcrypt

    new_user = User(full_name=full_name, email=email, password_hash=hashed_password)  # Create a new User object

    db.session.add(new_user)  # Add the new user to the database session
    db.session.commit()  # Commit the changes to the database

    return jsonify({'message': 'User registered successfully'}), 201  # Return a success message

@app.route('/login', methods=['POST'])  # Define the /login endpoint for user login
def login_user():
    data = request.get_json()  # Get the data sent from the client as JSON
    if not data or 'login-email' not in data or 'login-password' not in data:
        return jsonify({'error': 'Missing required fields'}), 400  # Return an error if any required field is missing

    email = data['login-email']
    password = data['login-password']

    user = User.query.filter_by(email=email).first()  # Retrieve the user from the database based on the provided email

    if not user:  # If no user with that email was found
        return jsonify({'error': 'Invalid credentials'}), 401  # Return an authentication error

    if bcrypt.checkpw(password.encode('utf-8'), user.password_hash.encode('utf-8')):  # Check if the provided password matches the hashed password in the database
        #  **In a real app, you would generate a session or token here!**
        return jsonify({'message': 'Login successful'}), 200  # Return a success message
    else:
        return jsonify({'error': 'Invalid credentials'}), 401  # Return an authentication error

if __name__ == '__main__':
    app.run(debug=True)  # Run the Flask app in debug mode (for development)