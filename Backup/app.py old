from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import bcrypt  # For password hashing
import os
import logging
from google.cloud import secretmanager  # For Google Cloud Secret Manager
import traceback

app = Flask(__name__)  # Create a Flask application instance

# Configure logging
logging.basicConfig(level=logging.DEBUG,  # Changed to DEBUG for more detail
                    format='%(asctime)s - %(levelname)s - %(message)s')


def get_db_credentials():
    """
    Securely retrieves SQL Server credentials from environment variables or Secret Manager.
    """
    logging.debug("Entering get_db_credentials()")  # Added debug log
    if os.environ.get('GAE_ENV') == 'standard':
        #  Running on App Engine Standard
        db_user = os.environ.get('CLOUD_SQL_USERNAME')
        db_pass = os.environ.get('CLOUD_SQL_PASSWORD')
        db_name = os.environ.get('CLOUD_SQL_DATABASE_NAME')
        db_host = os.environ.get('CLOUD_SQL_INSTANCE_CONNECTION_NAME')
        logging.debug(
            f"GAE_ENV=standard: db_user={db_user}, db_pass={db_pass}, db_name={db_name}, db_host={db_host}")  # Added debug log
        return db_user, db_pass, db_name, db_host
    else:
        #  Running locally or elsewhere;  use Secret Manager if available
        try:
            client = secretmanager.SecretManagerServiceClient()
            project_id = os.environ.get('GOOGLE_CLOUD_PROJECT')
            if not project_id:
                raise ValueError("GOOGLE_CLOUD_PROJECT environment variable must be set.")

            def get_secret(secret_name):
                name = f"projects/{project_id}/secrets/{secret_name}/versions/latest"
                response = client.access_secret_version(request={"name": name})
                return response.payload.data.decode("UTF-8")

            db_user = get_secret("cloud_sql_username")
            db_pass = get_secret("cloud_sql_password")
            db_name = get_secret("cloud_sql_database_name")
            db_host = get_secret("cloud_sql_instance_name")
            logging.debug(
                f"Secret Manager: db_user={db_user}, db_pass={db_pass}, db_name={db_name}, db_host={db_host}")  # Added debug log
            return db_user, db_pass, db_name, db_host
        except Exception as e:
            logging.warning(
                f"Could not retrieve secrets from Secret Manager: {e}.  Using environment variables.")
            logging.error(traceback.format_exc())
            #  Fall back to environment variables (for local testing, etc.)
            db_user = os.environ.get('CLOUD_SQL_USERNAME')
            db_pass = os.environ.get('CLOUD_SQL_PASSWORD')
            db_name = os.environ.get('CLOUD_SQL_DATABASE_NAME')
            db_host = os.environ.get('CLOUD_SQL_INSTANCE_CONNECTION_NAME')
            logging.debug(
                f"Env Vars fallback: db_user={db_user}, db_pass={db_pass}, db_name={db_name}, db_host={db_host}")  # Added debug log
            return db_user, db_pass, db_name, db_host
    finally:
        logging.debug("Exiting get_db_credentials()")  # Added debug log


#  Get database credentials
db_user, db_pass, db_name, db_host = get_db_credentials()

#  App Engine Standard uses a specific format.  Local might use a direct connection.
if os.environ.get('GAE_ENV') == 'standard':
    app.config['SQLALCHEMY_DATABASE_URI'] = (
        f'mssql+pyodbc://{db_user}:{db_pass}@/'
        f'{db_name}?driver=ODBC+Driver+17+for+SQL+Server;'
        f'SERVER={db_host}'
    )
    logging.info(
        f"SQLALCHEMY_DATABASE_URI (standard): {app.config['SQLALCHEMY_DATABASE_URI']}")  # Added info log
else:
    app.config['SQLALCHEMY_DATABASE_URI'] = f'mssql+pyodbc://{db_user}:{db_pass}@{db_host}/{db_name}?driver=ODBC+Driver+17+for+SQL+Server'  # Local
    logging.info(
        f"SQLALCHEMY_DATABASE_URI (local): {app.config['SQLALCHEMY_DATABASE_URI']}")  # Added info log

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Suppress a warning
db.init_app(app)  # Initialize SQLAlchemy with the Flask app
app.app_context().push()  # Create an application context


# Commented out for now, as per recommendation
# @app.before_request
# def before_request():
#     """
#     Sets up the database connection and performs any necessary initialization before each request.
#     """
#     logging.debug("Entering before_request()")  # Added debug log
#     try:
#         if db.engine.url.drivername == 'mssql+pyodbc':
#             # This is crucial for pyodbc!
#             conn = db.engine.connect()
#             conn.close()
#             logging.debug("Database connection closed (pyodbc)")  # Added debug log
#     except Exception as e:
#         logging.error(f"Error during before_request: {e}")
#         logging.error(traceback.format_exc())  # Log full traceback
#         #  Consider more robust error handling here.  For example, you might
#         #  want to attempt to re-establish the connection, or return an
#         #  error page to the user.
#         raise
#     finally:
#         logging.debug("Exiting before_request()")  # Added debug log

with app.app_context():
    db.create_all()  # Create the database tables
    logging.info("Database tables created")  # Added info log


@app.route('/menu.html')
def menu():
    return send_from_directory('.', 'menu.html')


@app.route('/account.html', methods=['GET'])
def account():
    return send_from_directory('.', 'account.html')


@app.route('/register', methods=['POST'])  # Define the /register endpoint for user registration
def register_user():
    logging.debug("Entering /register route")  # Added debug log
    try:
        data = request.get_json()  # Get the data sent from the client as JSON
        logging.debug(f"Received JSON data: {data}")  # Added debug log
        if not data or 'create-name' not in data or 'create-email' not in data or 'create-password' not in data:
            logging.warning("Registration request missing required fields")
            return jsonify({'error': 'Missing required fields'}), 400  # Return an error if any required field is missing

        full_name = data['create-name']
        email = data['create-email']
        password = data['create-password']

        logging.debug(
            f"Extracted data: full_name={full_name}, email={email}, password={password}")  # Added debug log

        if User.query.filter_by(email=email).first():  # Check if a user with this email already exists
            logging.warning(f"Email already exists: {email}")
            return jsonify({'error': 'Email already exists'}), 409  # Return an error if the email is already taken

        logging.debug("Attempting to hash password")  # Added debug log
        hashed_password = bcrypt.hashpw(password.encode('utf-8'),
                                         bcrypt.gensalt()).decode('utf-8')  # Hash the password using bcrypt
        logging.debug("Password hashed successfully")  # Added debug log

        new_user = User(full_name=full_name, email=email,
                        password_hash=hashed_password)  # Create a new User object

        logging.debug("Attempting to add user to database")  # Added debug log
        db.session.add(new_user)  # Add the new user to the database session
        db.session.commit()  # Commit the changes to the database
        logging.info(f"User registered successfully: {email}")
        return jsonify({'message': 'User registered successfully'}), 201  # Return a success message

    except Exception as e:
        db.session.rollback()
        logging.error(f"Error registering user: {e}")
        logging.error(traceback.format_exc())  # Log the full traceback.
        return jsonify({'error': f'Database error: {str(e)}'}), 500  # Handle database errors
    finally:
        logging.debug("Exiting /register route")  # Added debug log


@app.route('/login', methods=['POST'])  # Define the /login endpoint for user login
def login_user():
    logging.debug("Entering /login route")  # Added debug log
    try:
        data = request.get_json()  # Get the data sent from the client as JSON
        logging.debug(f"Received JSON data: {data}")  # Added debug log
        if not data or 'login-email' not in data or 'login-password' not in data:
            logging.warning("Login request missing required fields")
            return jsonify({'error': 'Missing required fields'}), 400  # Return an error if any required field is missing

        email = data['login-email']
        password = data['login-password']

        logging.debug(f"Extracted data: email={email}, password={password}")  # Added debug log

        user = User.query.filter_by(email=email).first()  # Retrieve the user from the database based on the provided email

        if not user:  # If no user with that email was found
            logging.warning(f"Invalid login attempt: Email not found: {email}")
            return jsonify({'error': 'Invalid credentials'}), 401  # Return an authentication error

        if bcrypt.checkpw(password.encode('utf-8'), user.password_hash.encode('utf-8')):  # Check if the provided password matches the hashed password in the database
            #  **In a real app, you MUST generate a session or token here!**
            #  The following is INSECURE and for demonstration ONLY:
            # session['user_id'] = user.id  #  Insecure!  Use Flask-Session or similar.
            logging.info(f"User logged in successfully: {email}")
            return jsonify({'message': 'Login successful'}), 200  # Return a success message
        else:
            logging.warning(f"Invalid login attempt: Incorrect password for {email}")
            return jsonify({'error': 'Invalid credentials'}), 401  # Return an authentication error

    except Exception as e:
        logging.error(f"Error during login: {e}")
        logging.error(traceback.format_exc())
        return jsonify({'error': f'Login error: {str(e)}'}), 500
    finally:
        logging.debug("Exiting /login route")  # Added debug log


if __name__ == '__main__':
    app.run(debug=True)  # Run the Flask app in debug mode (for development)
